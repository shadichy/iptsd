#!/system/bin/sh
# shellcheck shell=ksh
# SPDX-License-Identifier: GPL-2.0-or-later

if [ ! "$SCRIPT_DIR" ]; then
	SCRIPT_DIR=$(dirname "$(realpath "$0")")
	export SCRIPT_DIR
fi

set -uo pipefail

spdlog() {
	local level="${1}"
	shift
	local messages="$*"

	case "${level}" in
	info) level="$(printf "%s%s%s" "\033[32m" "info" "\e[0m")" ;;
	warn) level="$(printf "%s%s%s" "\033[33m\033[1m" "warning" "\e[0m")" ;;
	error) level="$(printf "%s%s%s" "\033[31m\033[1m" "error" "\e[0m")" ;;
	esac

	echo -e "[$(date '+%H:%M:%S.%3N')] [${level}]" "${messages}" >&2
}

print_if_executable() {
	local file="${1}"

	if [ -x "${file}" ]; then
		echo "${file}"
		return 0
	fi

	return 1
}

find_program() {
	local name="${1}" script_dir="${2}" project_dir="${3:-}"

	# If the calling script is installed to $PATH, the program should be right next to it
	if print_if_executable "${script_dir}/${name}"; then
		return 0
	fi

	# Otherwise the script might be called from the cloned git repository
	if [ -n "${project_dir}" ] && [ -f "${project_dir}/meson_options.txt" ]; then
		local file
		file="$(find "${project_dir}" -type f -perm -554 -name "${name}" | head -n1)"

		if print_if_executable "${file}"; then
			spdlog info "Located ${name} at $(realpath "${file}")"
			return 0
		fi
	fi

	# Fall back to looking in PATH
	if print_if_executable "$(command -v "${name}" || true)"; then
		spdlog warn "Located ${name} using PATH"
		spdlog warn "This script is designed to not use PATH, something might be wrong"
		return 0
	fi

	return 1
}

run_iptsd_foreach() {
	local project_dir
	project_dir="$(realpath "${SCRIPT_DIR}/../..")"

	local device_index=""
	local device_type="any"
	local show_help=""

	while getopts ":t:i:pmh" args; do
		case "${args}" in
		i) device_index="${OPTARG}" ;;
		t) device_type="${OPTARG}" ;;
		*) show_help="1" ;;
		esac
	done

	shift $OPTIND

	if [ "$*" = "" ]; then
		show_help="1"
	fi

	if [ -n "${show_help}" ]; then
		echo "Usage: iptsd-foreach [OPTIONS]"
		echo "Find IPTS devices"
		echo ""
		echo "Options:"
		echo "  -h                                   Print this help message and exit"
		echo "  -t  TEXT:{any,touchscreen,touchpad}  Selects all devices with the given type"
		echo "  -i  INTEGER                          Selects a single device by its index"
		return 0
	fi

	local check_device
	check_device="$(find_program "iptsd-check-device" "${SCRIPT_DIR}" "${project_dir}")"

	if [ -z "${check_device}" ]; then
		spdlog error "Could not locate iptsd-check-device"
		return 1
	fi

	local devices
	devices=()

	while read -r device; do
		if [ ! -r "${device}" ]; then
			spdlog warn "Can't read from ${device}, is the program running as root?"
			continue
		fi

		if ! "${check_device}" --quiet --type="${device_type}" "${device}"; then
			continue
		fi

		devices+=("$device")
	done <<<"$(find /dev -maxdepth 1 | grep -E "hidraw[0-9]+" | sort)"

	# If no devices were found, exit
	if ((${#devices[@]} == 0)); then
		spdlog info "No devices found"
		return 0
	fi

	if [ -n "${device_index}" ]; then
		if ((${#devices[@]} <= device_index)) || ((device_index < 0)); then
			spdlog error "Device index is out of range"
			return 1
		fi

		devices=("${devices[${device_index}]}")
	fi

	local dev
	for dev in "${devices[@]}"; do
		echo -n "$dev"
	done

	return 0
}

run_iptsd_foreach "$@"
